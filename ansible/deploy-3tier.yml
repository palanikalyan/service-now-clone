---
# 3-Tier AWS deployment: Master + Backend + Frontend
# Usage: ansible-playbook -i inventory.ini deploy-3tier.yml -v

- name: Setup Master Instance
  hosts: master
  become: yes
  gather_facts: yes
  vars:
    docker_package:
      - docker.io
      - docker-compose
      - git
      - curl
      - wget

  tasks:
    - name: Update system packages
      apt:
        update_cache: yes
        cache_valid_time: 3600
      changed_when: false

    - name: Install Docker and dependencies
      apt:
        name: "{{ docker_package }}"
        state: present
        update_cache: yes

    - name: Start Docker service
      service:
        name: docker
        state: started
        enabled: yes

    - name: Create docker group
      group:
        name: docker
        state: present

    - name: Add ubuntu user to docker group
      user:
        name: ubuntu
        groups: docker
        append: yes

    - name: Check if repo already cloned
      stat:
        path: /opt/service-now-clone
      register: repo_exists

    - name: Pull repo on Master
      git:
        repo: https://github.com/palanikalyan/service-now-clone.git
        dest: /opt/service-now-clone
        version: main
      become_user: ubuntu
      when: not repo_exists.stat.exists

    - name: Set repo permissions
      file:
        path: /opt/service-now-clone
        owner: ubuntu
        group: ubuntu
        mode: '0755'
        recurse: yes

    - name: Display Master info
      debug:
        msg: |
          ========== MASTER INSTANCE SETUP COMPLETE ==========
          - Docker installed and running
          - Repository cloned to /opt/service-now-clone
          - Ready to orchestrate Backend and Frontend deployments
          - Hostname: {{ ansible_hostname }}
          - Private IP: {{ ansible_default_ipv4.address }}

    - name: Master deployment complete
      set_fact:
        master_ready: true


- name: Setup Backend Instance (service-now API with H2)
  hosts: backend
  become: yes
  gather_facts: yes
  vars:
    docker_package:
      - docker.io
      - docker-compose
      - git
      - curl
      - wget
    backend_port: 8080
    backend_container: service-now-app
    backend_image: service-now-backend:latest
    h2_data_path: /data

  tasks:
    - name: Update system packages
      apt:
        update_cache: yes
        cache_valid_time: 3600
      changed_when: false

    - name: Install Docker and dependencies
      apt:
        name: "{{ docker_package }}"
        state: present
        update_cache: yes

    - name: Start Docker service
      service:
        name: docker
        state: started
        enabled: yes

    - name: Create docker group
      group:
        name: docker
        state: present

    - name: Add ubuntu user to docker group
      user:
        name: ubuntu
        groups: docker
        append: yes

    - name: Create h2-data directory
      file:
        path: "{{ h2_data_path }}"
        state: directory
        owner: ubuntu
        group: ubuntu
        mode: '0755'

    - name: Check if repo already cloned
      stat:
        path: /opt/service-now-clone
      register: repo_exists

    - name: Pull repo on Backend
      git:
        repo: https://github.com/palanikalyan/service-now-clone.git
        dest: /opt/service-now-clone
        version: main
      become_user: ubuntu
      when: not repo_exists.stat.exists

    - name: Set repo permissions
      file:
        path: /opt/service-now-clone
        owner: ubuntu
        group: ubuntu
        mode: '0755'
        recurse: yes

    - name: Create app-network bridge
      docker_network:
        name: app-network
        state: present
        driver: bridge

    - name: Stop existing backend container (if any)
      docker_container:
        name: "{{ backend_container }}"
        state: absent
      ignore_errors: yes

    - name: Build backend Docker image from source
      docker_image:
        name: "{{ backend_image }}"
        source: build
        build:
          path: /opt/service-now-clone/service-now
          dockerfile: Dockerfile
        state: present
      register: backend_build_result

    - name: Create h2-data Docker volume
      docker_volume:
        name: h2-data
        state: present

    - name: Run backend container with H2 embedded database
      docker_container:
        name: "{{ backend_container }}"
        image: "{{ backend_image }}"
        state: started
        restart_policy: always
        ports:
          - "{{ backend_port }}:8080"
        networks:
          - name: app-network
        env:
          SPRING_APPLICATION_NAME: "service-now-backend"
          SPRING_H2_CONSOLE_ENABLED: "true"
          SPRING_DATASOURCE_URL: "jdbc:h2:file:/data/request_management_db;MODE=MYSQL"
          SPRING_DATASOURCE_DRIVERCLASSNAME: "org.h2.Driver"
          SPRING_DATASOURCE_USERNAME: "sa"
          SPRING_DATASOURCE_PASSWORD: ""
          SPRING_JPA_DATABASE_PLATFORM: "org.hibernate.dialect.H2Dialect"
          SPRING_JPA_HIBERNATE_DDL_AUTO: "update"
          SERVER_PORT: "8080"
        volumes:
          - "h2-data:/data"
        healthcheck:
          test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
          interval: 10s
          timeout: 5s
          retries: 5
          start_period: 30s
      register: backend_container_result

    - name: Wait for backend to be ready (port 8080)
      wait_for:
        host: "{{ ansible_default_ipv4.address }}"
        port: "{{ backend_port }}"
        delay: 5
        timeout: 120
        state: started

    - name: Wait additional time for application startup
      pause:
        seconds: 15

    - name: Test backend health endpoint
      uri:
        url: "http://localhost:{{ backend_port }}/actuator/health"
        method: GET
      register: backend_health
      retries: 10
      delay: 5
      until: backend_health.status == 200

    - name: Check H2 database connectivity
      shell: |
        docker exec {{ backend_container }} curl -s http://localhost:{{ backend_port }}/actuator/health | grep -i "\"status\"" || echo "Health check OK"
      register: health_output

    - name: Display backend deployment info
      debug:
        msg: |
          ========== BACKEND DEPLOYMENT COMPLETE ==========
          - Docker image built: {{ backend_image }}
          - Container running: {{ backend_container }}
          - Port: {{ backend_port }}
          - H2 Database: embedded at /data/request_management_db
          - H2 Console: http://{{ ansible_default_ipv4.address }}:{{ backend_port }}/h2-console
          - Health status: {{ backend_health.json.status | default('OK') }}
          - Hostname: {{ ansible_hostname }}
          - Private IP: {{ ansible_default_ipv4.address }}
          - Health output: {{ health_output.stdout }}

    - name: Backend deployment complete
      set_fact:
        backend_ready: true


- name: Setup Frontend Instance (Angular UI with Nginx)
  hosts: frontend
  become: yes
  gather_facts: yes
  vars:
    docker_package:
      - docker.io
      - docker-compose
      - git
      - curl
      - wget
    frontend_port: 80
    frontend_container: request-management-ui
    frontend_image: request-management-ui:latest
    backend_private_ip: "{{ hostvars['backend_host']['ansible_default_ipv4']['address'] | default('backend.local') }}"

  tasks:
    - name: Update system packages
      apt:
        update_cache: yes
        cache_valid_time: 3600
      changed_when: false

    - name: Install Docker and dependencies
      apt:
        name: "{{ docker_package }}"
        state: present
        update_cache: yes

    - name: Start Docker service
      service:
        name: docker
        state: started
        enabled: yes

    - name: Create docker group
      group:
        name: docker
        state: present

    - name: Add ubuntu user to docker group
      user:
        name: ubuntu
        groups: docker
        append: yes

    - name: Check if repo already cloned
      stat:
        path: /opt/service-now-clone
      register: repo_exists

    - name: Pull repo on Frontend
      git:
        repo: https://github.com/palanikalyan/service-now-clone.git
        dest: /opt/service-now-clone
        version: main
      become_user: ubuntu
      when: not repo_exists.stat.exists

    - name: Set repo permissions
      file:
        path: /opt/service-now-clone
        owner: ubuntu
        group: ubuntu
        mode: '0755'
        recurse: yes

    - name: Create app-network bridge
      docker_network:
        name: app-network
        state: present
        driver: bridge

    - name: Stop existing frontend container (if any)
      docker_container:
        name: "{{ frontend_container }}"
        state: absent
      ignore_errors: yes

    - name: Build frontend Docker image from source
      docker_image:
        name: "{{ frontend_image }}"
        source: build
        build:
          path: /opt/service-now-clone/request-management-ui
          dockerfile: Dockerfile
        state: present
      register: frontend_build_result

    - name: Create nginx config directory
      file:
        path: /opt/nginx-conf
        state: directory
        mode: '0755'

    - name: Create nginx proxy configuration
      copy:
        dest: /opt/nginx-conf/default.conf
        content: |
          upstream backend {
              server {{ backend_private_ip }}:8080;
          }

          server {
              listen 80;
              server_name _;
              client_max_body_size 10M;

              # Serve static Angular files
              location / {
                  root /usr/share/nginx/html;
                  index index.html index.htm;
                  try_files $uri $uri/ /index.html;

                  # Add CORS headers
                  add_header 'Access-Control-Allow-Origin' '*' always;
                  add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
                  add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization' always;
              }

              # Proxy API requests to backend
              location /api/ {
                  proxy_pass http://backend/api/;
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
                  proxy_set_header X-Forwarded-Host $host;
                  proxy_set_header X-Forwarded-Port $server_port;

                  # Add CORS headers for API
                  add_header 'Access-Control-Allow-Origin' '*' always;
                  add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
                  add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization' always;

                  # Handle preflight requests
                  if ($request_method = 'OPTIONS') {
                      add_header 'Access-Control-Max-Age' 1728000;
                      add_header 'Content-Type' 'text/plain charset=UTF-8';
                      add_header 'Content-Length' 0;
                      return 204;
                  }
              }

              # Proxy health checks
              location /actuator/ {
                  proxy_pass http://backend/actuator/;
                  proxy_set_header Host $host;
              }

              # Proxy H2 console
              location /h2-console/ {
                  proxy_pass http://backend/h2-console/;
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
              }

              # Error pages
              error_page 404 /index.html;
              error_page 500 502 503 504 /50x.html;
              location = /50x.html {
                  root /usr/share/nginx/html;
              }
          }
      owner: root
      group: root
      mode: '0644'

    - name: Run frontend container with Nginx proxy
      docker_container:
        name: "{{ frontend_container }}"
        image: "{{ frontend_image }}"
        state: started
        restart_policy: always
        ports:
          - "{{ frontend_port }}:80"
        networks:
          - name: app-network
        volumes:
          - "/opt/nginx-conf/default.conf:/etc/nginx/conf.d/default.conf:ro"
        healthcheck:
          test: ["CMD", "curl", "-f", "http://localhost/"]
          interval: 10s
          timeout: 5s
          retries: 5
          start_period: 15s
      register: frontend_container_result

    - name: Wait for frontend to be ready (port 80)
      wait_for:
        host: "{{ ansible_default_ipv4.address }}"
        port: "{{ frontend_port }}"
        delay: 5
        timeout: 120
        state: started

    - name: Wait additional time for application startup
      pause:
        seconds: 10

    - name: Test frontend health endpoint
      uri:
        url: "http://localhost:{{ frontend_port }}/"
        method: GET
      register: frontend_health
      retries: 10
      delay: 5
      until: frontend_health.status == 200

    - name: Display frontend deployment info
      debug:
        msg: |
          ========== FRONTEND DEPLOYMENT COMPLETE ==========
          - Docker image built: {{ frontend_image }}
          - Container running: {{ frontend_container }}
          - Port: {{ frontend_port }}
          - Backend proxy: http://{{ backend_private_ip }}:8080
          - Status: HTTP {{ frontend_health.status }}
          - Hostname: {{ ansible_hostname }}
          - Private IP: {{ ansible_default_ipv4.address }}

    - name: Frontend deployment complete
      set_fact:
        frontend_ready: true


- name: Final Deployment Summary
  hosts: localhost
  gather_facts: no
  tasks:
    - name: Collect all IPs
      set_fact:
        master_ip: "{{ hostvars['master_host']['ansible_host'] | default('N/A') }}"
        backend_ip: "{{ hostvars['backend_host']['ansible_host'] | default('N/A') }}"
        backend_private_ip: "{{ hostvars['backend_host']['ansible_default_ipv4']['address'] | default('N/A') }}"
        frontend_ip: "{{ hostvars['frontend_host']['ansible_host'] | default('N/A') }}"

    - name: Display final deployment summary
      debug:
        msg: |
          
          ╔══════════════════════════════════════════════════════════════════╗
          ║      3-TIER AWS DEPLOYMENT SUCCESSFULLY COMPLETED ✓             ║
          ╚══════════════════════════════════════════════════════════════════╝

          📍 INSTANCES DEPLOYED:
          ─────────────────────────────────────────────────────────────────
          • Master Instance:    {{ master_ip }}
          • Backend Instance:   {{ backend_ip }} (private: {{ backend_private_ip }})
          • Frontend Instance:  {{ frontend_ip }}

          🌐 ACCESS YOUR APPLICATION:
          ─────────────────────────────────────────────────────────────────
          • Frontend UI:        http://{{ frontend_ip }}/
          • Backend API:        http://{{ backend_ip }}:8080/api
          • Backend Health:     http://{{ backend_ip }}:8080/actuator/health
          • H2 Console:         http://{{ backend_ip }}:8080/h2-console
          • H2 DB URL:          jdbc:h2:file:/data/request_management_db;MODE=MYSQL

          🐳 DOCKER CONTAINERS:
          ─────────────────────────────────────────────────────────────────
          • Backend:   service-now-app:latest (port 8080)
          • Frontend:  request-management-ui:latest (port 80)
          • Database:  H2 embedded (file-based at /data/)

          📁 SOURCE CODE LOCATIONS:
          ─────────────────────────────────────────────────────────────────
          • Master:    /opt/service-now-clone
          • Backend:   /opt/service-now-clone/service-now
          • Frontend:  /opt/service-now-clone/request-management-ui

          ✅ NEXT STEPS:
          ─────────────────────────────────────────────────────────────────
          1. Access frontend: http://{{ frontend_ip }}/
          2. Test API: curl http://{{ backend_ip }}:8080/api/requests
          3. Monitor logs: docker logs -f service-now-app
          4. Backup H2 data: docker exec service-now-app cp -r /data /data-backup
          5. Scale up: Add more backend/frontend instances as needed

          ⚠️  SECURITY NOTES:
          ─────────────────────────────────────────────────────────────────
          • Enable HTTPS/SSL on frontend (AWS ACM + ALB)
          • Restrict backend port 8080 to frontend security group only
          • Enable VPC Flow Logs for network monitoring
          • Regular backup of H2 database files
          • Update security groups after verifying connectivity

          📞 SSH COMMANDS FOR MANAGEMENT:
          ─────────────────────────────────────────────────────────────────
          ssh -i ~/.ssh/aws-key.pem ubuntu@{{ master_ip }}
          ssh -i ~/.ssh/aws-key.pem ubuntu@{{ backend_ip }}
          ssh -i ~/.ssh/aws-key.pem ubuntu@{{ frontend_ip }}

          🔍 TROUBLESHOOTING:
          ─────────────────────────────────────────────────────────────────
          # Check backend logs
          docker logs -f service-now-app

          # Check frontend logs
          docker logs -f request-management-ui

          # Test backend connectivity from frontend
          docker exec request-management-ui curl http://{{ backend_private_ip }}:8080/actuator/health

          # Restart services
          docker restart service-now-app
          docker restart request-management-ui

          ╔══════════════════════════════════════════════════════════════════╗
          ║              Deployment Status: ✓ COMPLETE                       ║
          ╚══════════════════════════════════════════════════════════════════╝
